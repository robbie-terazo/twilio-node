'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */


var client;
var holodeck;

describe('VerificationAttempt', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should treat the first each arg as a callback',
    function(done) {
      var body = {
          'attempts': [
              {
                  'sid': 'VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'service_sid': 'VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2020-08-11T18:36:59Z',
                  'date_updated': '2020-08-11T18:37:00Z',
                  'conversion_status': 'unconverted',
                  'channel': 'sms',
                  'price': {
                      'value': '0.005',
                      'currency': 'usd'
                  },
                  'channel_data': {
                      'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      'to': '+573003003030',
                      'status': 'unconfirmed',
                      'message_status': 'undelivered',
                      'error_code': '30008',
                      'country': 'CO',
                      'code_length': 6,
                      'locale': 'es',
                      'mcc': '732',
                      'mnc': '103',
                      'carrier': 'Colombia Movil (Tigo)'
                  },
                  'url': 'https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
              }
          ],
          'meta': {
              'key': 'attempts',
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'previous_page_url': null,
              'url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'next_page_url': null
          }
      };
      holodeck.mock(new Response(200, body));
      client.verify.v2.verificationAttempts.each(() => done());
    }
  );
  it('should treat the second arg as a callback',
    function(done) {
      var body = {
          'attempts': [
              {
                  'sid': 'VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'service_sid': 'VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2020-08-11T18:36:59Z',
                  'date_updated': '2020-08-11T18:37:00Z',
                  'conversion_status': 'unconverted',
                  'channel': 'sms',
                  'price': {
                      'value': '0.005',
                      'currency': 'usd'
                  },
                  'channel_data': {
                      'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      'to': '+573003003030',
                      'status': 'unconfirmed',
                      'message_status': 'undelivered',
                      'error_code': '30008',
                      'country': 'CO',
                      'code_length': 6,
                      'locale': 'es',
                      'mcc': '732',
                      'mnc': '103',
                      'carrier': 'Colombia Movil (Tigo)'
                  },
                  'url': 'https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
              }
          ],
          'meta': {
              'key': 'attempts',
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'previous_page_url': null,
              'url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'next_page_url': null
          }
      };
      holodeck.mock(new Response(200, body));
      client.verify.v2.verificationAttempts.each({pageSize: 20}, () => done());
      holodeck.assertHasRequest(new Request({
          method: 'GET',
          url: 'https://verify.twilio.com/v2/Attempts',
          params: {PageSize: 20},
      }));
    }
  );
  it('should find the callback in the opts object',
    function(done) {
      var body = {
          'attempts': [
              {
                  'sid': 'VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'service_sid': 'VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2020-08-11T18:36:59Z',
                  'date_updated': '2020-08-11T18:37:00Z',
                  'conversion_status': 'unconverted',
                  'channel': 'sms',
                  'price': {
                      'value': '0.005',
                      'currency': 'usd'
                  },
                  'channel_data': {
                      'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      'to': '+573003003030',
                      'status': 'unconfirmed',
                      'message_status': 'undelivered',
                      'error_code': '30008',
                      'country': 'CO',
                      'code_length': 6,
                      'locale': 'es',
                      'mcc': '732',
                      'mnc': '103',
                      'carrier': 'Colombia Movil (Tigo)'
                  },
                  'url': 'https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
              }
          ],
          'meta': {
              'key': 'attempts',
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'previous_page_url': null,
              'url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'next_page_url': null
          }
      };
      holodeck.mock(new Response(200, body));
      client.verify.v2.verificationAttempts.each({callback: () => done()}, () => fail('wrong callback!'));
    }
  );
  it('should generate valid list request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.verify.v2.verificationAttempts.list();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://verify.twilio.com/v2/Attempts';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid list_verification_attempts_empty response',
    function(done) {
      var body = {
          'attempts': [],
          'meta': {
              'key': 'attempts',
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'previous_page_url': null,
              'url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'next_page_url': null
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.verify.v2.verificationAttempts.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid list_verification_attempts response',
    function(done) {
      var body = {
          'attempts': [
              {
                  'sid': 'VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'service_sid': 'VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2020-08-11T18:36:59Z',
                  'date_updated': '2020-08-11T18:37:00Z',
                  'conversion_status': 'unconverted',
                  'channel': 'sms',
                  'price': {
                      'value': '0.005',
                      'currency': 'usd'
                  },
                  'channel_data': {
                      'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                      'to': '+573003003030',
                      'status': 'unconfirmed',
                      'message_status': 'undelivered',
                      'error_code': '30008',
                      'country': 'CO',
                      'code_length': 6,
                      'locale': 'es',
                      'mcc': '732',
                      'mnc': '103',
                      'carrier': 'Colombia Movil (Tigo)'
                  },
                  'url': 'https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
              }
          ],
          'meta': {
              'key': 'attempts',
              'page': 0,
              'page_size': 50,
              'first_page_url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'previous_page_url': null,
              'url': 'https://verify.twilio.com/v2/Attempts?PageSize=50&Page=0',
              'next_page_url': null
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.verify.v2.verificationAttempts.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.verify.v2.verificationAttempts('VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://verify.twilio.com/v2/Attempts/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch_verification_attempt response',
    function(done) {
      var body = {
          'sid': 'VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'service_sid': 'VAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_created': '2020-08-11T18:36:59Z',
          'date_updated': '2020-08-11T18:37:00Z',
          'conversion_status': 'unconverted',
          'channel': 'sms',
          'price': {
              'value': '0.005',
              'currency': 'usd'
          },
          'channel_data': {
              'verification_sid': 'VEaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
              'to': '+573003003030',
              'status': 'unconfirmed',
              'message_status': 'undelivered',
              'error_code': '30008',
              'country': 'CO',
              'code_length': 6,
              'locale': 'es',
              'mcc': '732',
              'mnc': '103',
              'carrier': 'Colombia Movil (Tigo)'
          },
          'url': 'https://verify.twilio.com/v2/Attempts/VLaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
      };

      holodeck.mock(new Response(200, body));

      var promise = client.verify.v2.verificationAttempts('VLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
